const Tag = require('../models/tag');
const Blog = require('../models/blog');
const slugify = require('slugify');
const { errorHandler } = require('../helpers/dbErrorHandler');

exports.create = (req, res) => {
    console.log('req.body', req.body);

    const { tag:{name}, props:{app: {shopOrigin}}} = req.body;
    let slug = slugify(name).toLowerCase();

    let tag = new Tag({ name, slug, shop: shopOrigin });

    tag.save((err, data) => {
        if (err) {
            console.log(err);
            return res.status(400).json({
                error: errorHandler(err)
            });
        }
        res.json(data); // dont do this res.json({ tag: data });
    });
};

exports.update = (req, res) => {
    console.log('req.body in tag update controller', req.body);

    const { props:{shop}} = req.body;
    const slug = req.params.slug.toLowerCase();
    Tag.update({slug, shop}, {
        name: req.body.newTagName
    }, function(err, affected, resp) {
       if (err) {
            return res.json({
                error: errorHandler(err)
            });
        }
        console.log('tag update resp', resp)
        console.log('tag update affected', affected)
        res.json({newTagName: req.body.newTagName});
    })
};

exports.list = (req, res) => {
    console.log('req.headers.host',req.headers.host);
    console.log('req.query in tags list function',req.query);

    Tag.find({shop: req.query.shop})
        .sort({ createdAt: -1 })
        .exec((err, data) => {
        if (err) {
            return res.status(400).json({
                error: errorHandler(err)
            });
        }
        res.json(data);
    });
};

exports.read = (req, res) => {
    let {slug, limit, skip} = req.body;

    slug = slug.toLowerCase();
    limit = limit ? parseInt(limit) : 10;
    skip = skip ? parseInt(skip) : 0;

    let blogs;

    Tag.findOne({ slug }).exec((err, tag) => {
        if (err) {
            return res.status(400).json({
                error: 'Tag not found'
            });
        }
        // res.json(tag);
        Blog.find({ tags: tag })
            .populate('categories', '_id name slug')
            .populate('tags', '_id name slug')
            .populate('postedBy', '_id name')
            .sort({ total_ratings: -1 })
            .skip(skip)
            .limit(limit)
            .select('_id title autoGenerated product_imgurl mdesc slug categories postedBy tags createdAt updatedAt')
            .exec((err, data) => {
                if (err) {
                    return res.status(400).json({
                        error: errorHandler(err)
                    });
                }
                res.json({ tag: tag, blogs: data, size: data.length });
            });
    });
};

exports.remove = (req, res) => {
    const slug = req.params.slug.toLowerCase();

    Tag.findOneAndRemove({ slug }).exec((err, data) => {
        if (err) {
            return res.status(400).json({
                error: errorHandler(err)
            });
        }
        res.json({
            message: 'Tag deleted successfully'
        });
    });
};
